name: deploy
on: 
  push:
    branches:
      - "main"
    paths:
      - iac/**
      - .github/workflows/deploy.yml
  # schedule:
  #   - cron: "0 12 * * *"
  workflow_dispatch:

env:
  KEY_VAULT_WORKING_DIRECTORY: iac/key-vault  
  KEY_VAULT_REMOTE_STATE_KEY: dbx-key-vaults.terraform.tfstate
  APP_REGISTRATION_WORKING_DIRECTORY: iac/app-registration
  APP_REGISTRATION_REMOTE_STATE_KEY: dbx-app-registration.terraform.tfstate
  WORKLOAD_WORKING_DIRECTORY: iac/workload
  WORKLOAD_REMOTE_STATE_KEY: dbx.terraform.tfstate
  DBX_RESOURCES_WORKING_DIRECTORY: iac/dbx
  DBX_RESOURCES_REMOTE_STATE_KEY: dbx-resources.terraform.tfstate
  REMOTE_STATE_RG: dbx-demo-eastus2
  REMOTE_STATE_SA: tfdbxed
  REMOTE_STATE_CONTAINER: dbx-remote-state-eastus2-demo
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  
permissions:
  id-token: write
  contents: read

jobs:
  plan-key-vault:
    name: 'plan key vault'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secret'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.KEY_VAULT_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        run: terraform init
      - name: 'Terraform Validate'
        run: terraform validate
      - name: 'Terraform Plan'
        env:        
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        run: terraform plan -out="./key-vaults.tfplan"
      - name: 'Upload Plan'
        uses: actions/upload-artifact@v2
        with:
          name: key-vaults-plan
          path: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}/key-vaults.tfplan
          retention-days: 1
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  apply-key-vault:
    name: 'apply key vault'
    needs: plan-key-vault
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secret'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.KEY_VAULT_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
        run: terraform init
      - name: 'Download Plan'
        uses: actions/download-artifact@v2
        with:
          name: key-vaults-plan
      - name: 'Move Plan'
        run: mv ./key-vaults.tfplan ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
      - name: 'Delete Plan from Repo'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: key-vaults-plan
          failOnError: false
      - name:  'Terraform Apply'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
        run: terraform apply -auto-approve "./key-vaults.tfplan"
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  plan-app-registration:
    name: 'plan app registration'
    needs: apply-key-vault
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_REGISTRATION_WORKING_DIRECTORY }}
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secret'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.APP_REGISTRATION_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        run: terraform init
      - name: 'Terraform Validate'
        run: terraform validate
      - name: 'Terraform Plan'
        env:        
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        run: terraform plan -out="./app-registration.tfplan"
      - name: 'Upload Plan'
        uses: actions/upload-artifact@v2
        with:
          name: app-registration-plan
          path: ${{ env.APP_REGISTRATION_WORKING_DIRECTORY }}/app-registration.tfplan
          retention-days: 1
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  apply-app-registration:
    name: 'apply app registration'
    needs: plan-app-registration
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secret'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.APP_REGISTRATION_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.APP_REGISTRATION_WORKING_DIRECTORY }}
        run: terraform init
      - name: 'Download Plan'
        uses: actions/download-artifact@v2
        with:
          name: app-registration-plan
      - name: 'Move Plan'
        run: mv ./app-registration.tfplan ${{ env.APP_REGISTRATION_WORKING_DIRECTORY }}
      - name: 'Delete Plan from Repo'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: app-registration-plan
          failOnError: false
      - name:  'Terraform Apply'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.APP_REGISTRATION_WORKING_DIRECTORY }}
        run: terraform apply -auto-approve "./app-registration.tfplan"
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  plan-workload:
      name: 'plan workload'
      needs: apply-app-registration
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ${{ env.WORKLOAD_WORKING_DIRECTORY }}
      steps:
        - name: 'Checkout Repo'
          uses: actions/checkout@v2
        - name: 'Azure Login'
          uses: azure/login@v1
          with:
            tenant-id: ${{ secrets.TENANT_ID }}
            subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
            client-id: ${{ secrets.CLIENT_ID }}
        - name: 'Get Deployer Secrets'
          id: get-deployer-secret
          uses: azure/get-keyvault-secrets@v1
          with:
            keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
            secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
        - name: 'Setup Terraform'
          uses: hashicorp/setup-terraform@v1
        - name: 'Terraform Init'
          env: 
            TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.WORKLOAD_REMOTE_STATE_KEY}}'"
            ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
          run: terraform init
        - name: 'Terraform Validate'
          run: terraform validate
        - name: 'Terraform Plan'
          env:        
            ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
            ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
          run: terraform plan -out="./workload.tfplan"
        - name: 'Upload Plan'
          uses: actions/upload-artifact@v2
          with:
            name: workload-plan
            path: ${{ env.WORKLOAD_WORKING_DIRECTORY }}/workload.tfplan
            retention-days: 1
        - name: 'Azure CLI logout'
          uses: azure/CLI@v1
          with:
            inlineScript: |
              az logout
              az cache purge
              az account clear
  apply-workload:
    name: 'apply workload'
    needs: plan-workload
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Download Plan'
        uses: actions/download-artifact@v2
        with:
          name: workload-plan
      - name: 'Move Plan'
        run: mv ./workload.tfplan ${{ env.WORKLOAD_WORKING_DIRECTORY }}
      - name: 'Delete Plan from Repo'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: workload-plan
          failOnError: false
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secrets'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.WORKLOAD_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.WORKLOAD_WORKING_DIRECTORY }}
        run: terraform init
      - name:  'Terraform Apply'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.WORKLOAD_WORKING_DIRECTORY }}
        run: terraform apply -auto-approve "./workload.tfplan"
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  plan-dbx-resources:
      name: 'plan dbx resources'
      needs: apply-workload
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ${{ env.DBX_RESOURCES_WORKING_DIRECTORY }}
      steps:
        - name: 'Checkout Repo'
          uses: actions/checkout@v2
        - name: 'Azure Login'
          uses: azure/login@v1
          with:
            tenant-id: ${{ secrets.TENANT_ID }}
            subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
            client-id: ${{ secrets.CLIENT_ID }}
        - name: 'Get Deployer Secrets'
          id: get-deployer-secret
          uses: azure/get-keyvault-secrets@v1
          with:
            keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
            secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
        - name: 'Setup Terraform'
          uses: hashicorp/setup-terraform@v1
        - name: 'Terraform Init'
          env: 
            TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.DBX_RESOURCES_REMOTE_STATE_KEY}}'"
            ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
          run: terraform init
        - name: 'Terraform Validate'
          run: terraform validate
        - name: 'Terraform Plan'
          env:        
            ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
            TF_VAR_client_secret: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
            ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
          run: terraform plan -out="./dbx-resources.tfplan"
        - name: 'Upload Plan'
          uses: actions/upload-artifact@v2
          with:
            name: dbx-resources-plan
            path: ${{ env.DBX_RESOURCES_WORKING_DIRECTORY }}/dbx-resources.tfplan
            retention-days: 1
        - name: 'Azure CLI logout'
          uses: azure/CLI@v1
          with:
            inlineScript: |
              az logout
              az cache purge
              az account clear
  apply-dbx-resources:
    name: 'apply dbx resources'
    needs: plan-dbx-resources
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Download Plan'
        uses: actions/download-artifact@v2
        with:
          name: dbx-resources-plan
      - name: 'Move Plan'
        run: mv ./dbx-resources.tfplan ${{ env.DBX_RESOURCES_WORKING_DIRECTORY }}
      - name: 'Delete Plan from Repo'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: dbx-resources-plan
          failOnError: false
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secrets'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.DBX_RESOURCES_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.DBX_RESOURCES_WORKING_DIRECTORY }}
        run: terraform init
      - name:  'Terraform Apply'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.DBX_RESOURCES_WORKING_DIRECTORY }}
        run: terraform apply -auto-approve "./dbx-resources.tfplan"
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
      - name:  'Terraform Output'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.DBX_RESOURCES_WORKING_DIRECTORY }}
        run: |
          DBX_URL=$(terraform output -raw azurerm_databricks_workspace_url)
          DBX_FULL_URL=https://${DBX_URL}
          echo $DBX_FULL_URL
          echo "dbx_workspace_url=$DBX_FULL_URL" >> $GITHUB_ENV
          KV_ID=$(terraform output -raw secret_scope_vault_id)
          echo $KV_ID
          echo "key_vault_id=$KV_ID" >> $GITHUB_ENV
      - name: 'Echo Terraform Output'
        run: |
          echo ${{ env.dbx_workspace_url }}
          echo ${{ env.key_vault_id }}
      - name: 'Setup Python'
        uses: actions/setup-python@v3
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
      - name: 'Install Databricks CLI'
        uses: microsoft/install-databricks-cli@v1.0.0
      - name: 'Setup Databricks Token'
        run: |
          adburl=${{ env.dbx_workspace_url }}
          token=${{ secrets.MY_AZURE_AD_TOKEN }}
          databricks configure --token <<EOF
          $adburl
          $token
          EOF
      - name: 'Configure Key Vault Scope'
        run: |
          hostname=${{ env.dbx_workspace_url }}
          keyvaultid=${{ env.key_vault_id }}
          databricks secrets create-scope --scope "key-vault-secret-scope" --scope-backend-type AZURE_KEYVAULT --resource-id $keyvaultid --dns-name $hostname --initial-manage-principal users
