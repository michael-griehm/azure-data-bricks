name: deploy
on: 
  push:
    branches:
      - "main"
    paths:
      - iac/**
      - .github/workflows/deploy.yml
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

env:
  WORKLOAD_WORKING_DIRECTORY: iac/workload
  WORKLOAD_REMOTE_STATE_KEY: dbx.terraform.tfstate
  KEY_VAULT_WORKING_DIRECTORY: iac/key-vault
  KEY_VAULT_REMOTE_STATE_KEY: dbx-key-vaults.terraform.tfstate
  REMOTE_STATE_RG: dbx-demo-eastus2
  REMOTE_STATE_SA: tfdbxed
  REMOTE_STATE_CONTAINER: dbx-remote-state-eastus2-demo
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  
permissions:
  id-token: write
  contents: read

jobs:
  plan-key-vaults:
    name: 'plan key vault infrastructure'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secret'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.KEY_VAULT_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        run: terraform init
      - name: 'Terraform Validate'
        run: terraform validate
      - name: 'Terraform Plan'
        env:        
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        run: terraform plan -out="./key-vaults.tfplan"
      - name: 'Upload Plan'
        uses: actions/upload-artifact@v2
        with:
          name: key-vaults-plan
          path: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}/key-vaults.tfplan
          retention-days: 1
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  apply-key-vaults:
    name: 'apply key vault infrastructure'
    needs: plan-key-vaults
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secret'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.KEY_VAULT_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
        run: terraform init
      - name: 'Download Plan'
        uses: actions/download-artifact@v2
        with:
          name: key-vaults-plan
      - name: 'Move Plan'
        run: mv ./key-vaults.tfplan ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
      - name: 'Delete Plan from Repo'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: key-vaults-plan
          failOnError: false
      - name:  'Terraform Apply'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.KEY_VAULT_WORKING_DIRECTORY }}
        run: terraform apply -auto-approve "./key-vaults.tfplan"
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
  plan-workload:
      name: 'plan workload'
      needs: apply-key-vaults
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ${{ env.WORKLOAD_WORKING_DIRECTORY }}
      steps:
        - name: 'Checkout Repo'
          uses: actions/checkout@v2
        - name: 'Azure Login'
          uses: azure/login@v1
          with:
            tenant-id: ${{ secrets.TENANT_ID }}
            subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
            client-id: ${{ secrets.CLIENT_ID }}
        - name: 'Get Deployer Secrets'
          id: get-deployer-secret
          uses: azure/get-keyvault-secrets@v1
          with:
            keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
            secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
        - name: 'Setup Terraform'
          uses: hashicorp/setup-terraform@v1
        - name: 'Terraform Init'
          env: 
            TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.WORKLOAD_REMOTE_STATE_KEY}}'"
            ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
          run: terraform init
        - name: 'Terraform Validate'
          run: terraform validate
        - name: 'Terraform Plan'
          env:        
            ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
            TF_VAR_client_secret: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
            ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
          run: terraform plan -out="./workload.tfplan"
        - name: 'Upload Plan'
          uses: actions/upload-artifact@v2
          with:
            name: workload-plan
            path: ${{ env.WORKLOAD_WORKING_DIRECTORY }}/workload.tfplan
            retention-days: 1
        - name: 'Azure CLI logout'
          uses: azure/CLI@v1
          with:
            inlineScript: |
              az logout
              az cache purge
              az account clear
  apply-workload:
    name: 'apply workload'
    needs: plan-workload
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2
      - name: 'Download Plan'
        uses: actions/download-artifact@v2
        with:
          name: workload-plan
      - name: 'Move Plan'
        run: mv ./workload.tfplan ${{ env.WORKLOAD_WORKING_DIRECTORY }}
      - name: 'Delete Plan from Repo'
        uses: geekyeggo/delete-artifact@v1
        with:
          name: workload-plan
          failOnError: false
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
      - name: 'Get Deployer Secrets'
        id: get-deployer-secret
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.DEPLOYER_KEY_VAULT }}
          secrets: 'dbx-demo-eastus2-deployer, tfdbxed-access-key'
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1
      - name: 'Terraform Init'
        env: 
          TF_CLI_ARGS_init: "-backend-config='resource_group_name=${{env.REMOTE_STATE_RG}}' -backend-config='storage_account_name=${{env.REMOTE_STATE_SA}}' -backend-config='container_name=${{env.REMOTE_STATE_CONTAINER}}' -backend-config='key=${{env.WORKLOAD_REMOTE_STATE_KEY}}'"
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.WORKLOAD_WORKING_DIRECTORY }}
        run: terraform init
      - name:  'Terraform Apply'
        env:
          ARM_CLIENT_SECRET: ${{ steps.get-deployer-secret.outputs.dbx-demo-eastus2-deployer }}
          ARM_ACCESS_KEY: ${{ steps.get-deployer-secret.outputs.tfdbxed-access-key }}
        working-directory: ${{ env.WORKLOAD_WORKING_DIRECTORY }}
        run: terraform apply -auto-approve "./workload.tfplan"
      - name: 'Azure CLI logout'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear